/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.10.1/samples
 */

import org.gradle.api.tasks.Exec
import org.gradle.api.tasks.Copy

// Property to select between Node.js and Bun (default to Bun)
val useNodeJs = project.findProperty("useNodeJs")?.toString()?.toBoolean() ?: false

// Function to define the build command (Bun or Node.js)
fun buildCommand() = if (useNodeJs) "npm" else "bun"

// Define directories
val sveltekitProjectDir = projectDir.resolve("dashboard")
val esp32ProjectDir = projectDir.resolve("firmware")
val esp32DataDir = esp32ProjectDir.resolve("data")

// Task to install SvelteKit dependencies
val installSvelteKitDependencies by tasks.registering(Exec::class) {
    workingDir = sveltekitProjectDir
    commandLine(buildCommand(), "install")
    // Avoid re-running if dependencies are already installed
    outputs.upToDateWhen { sveltekitProjectDir.resolve("node_modules").exists() }
}

// Task to build the SvelteKit project
val buildSvelteKit by tasks.registering(Exec::class) {
    dependsOn(installSvelteKitDependencies)
    workingDir = sveltekitProjectDir
    commandLine(buildCommand(), "run", "build")
}

// Task to copy SvelteKit build output to ESP32 SPIFFS data directory
val copySvelteKitToSPIFFS by tasks.registering(Copy::class) {
    dependsOn(buildSvelteKit)
    from(sveltekitProjectDir.resolve("build"))
    into(esp32DataDir)
}

// Task to build the ESP32 firmware using PlatformIO
val buildESP32 by tasks.registering(Exec::class) {
    dependsOn(copySvelteKitToSPIFFS)
    workingDir = esp32ProjectDir
    commandLine("platformio", "run")
}

// Task to upload the ESP32 firmware to the device
val uploadESP32 by tasks.registering(Exec::class) {
    dependsOn(buildESP32)
    workingDir = esp32ProjectDir
    commandLine("platformio", "run", "--target", "upload")
}

// Task to clean the ESP32 build artifacts
val cleanESP32 by tasks.registering(Exec::class) {
    workingDir = esp32ProjectDir
    commandLine("platformio", "run", "--target", "clean")
}

// Task to monitor the ESP32 serial output
val monitorESP32 by tasks.registering(Exec::class) {
    workingDir = esp32ProjectDir
    commandLine("platformio", "device", "monitor")
}

// Task to clean both SvelteKit and ESP32 build artifacts
val cleanAll by tasks.registering {
    dependsOn(cleanESP32)
    doLast {
        val svelteBuildDir = sveltekitProjectDir.resolve("build")
        if (svelteBuildDir.exists()) {
            svelteBuildDir.deleteRecursively()
            println("Cleaned SvelteKit build directory.")
        }
    }
}

// Composite task to build everything
val buildAll by tasks.registering {
    dependsOn(buildESP32)
}

// Composite task to build and upload everything
val uploadAll by tasks.registering {
    dependsOn(uploadESP32)
}
